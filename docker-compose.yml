services:
  web:
    build:
      context: ./
      dockerfile: Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
      db:
        condition: service_healthy
      redis:
        condition: service_started
      elasticsearch:
        condition: service_started
    ports:
      - 8000:8000
    env_file:
      - .env
    volumes:
      - ./src:/srv
    networks:
      - my-net

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - 8080:8080
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:29092
    networks:
      - my-net

  kafka:
    image: obsidiandynamics/kafka
    container_name: kafka
    restart: "no"
    ports:
      - 2181:2181
      - 9093:9093
    environment:
      KAFKA_LISTENERS: "INTERNAL://:29092,EXTERNAL://:9093"
      KAFKA_ADVERTISED_LISTENERS: "INTERNAL://kafka:29092,EXTERNAL://localhost:9093"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT"
      KAFKA_INTER_BROKER_LISTENER_NAME: "INTERNAL"
      KAFKA_ZOOKEEPER_SESSION_TIMEOUT: "6000"
      KAFKA_RESTART_ATTEMPTS: "10"
      KAFKA_RESTART_DELAY: "5"
      ZOOKEEPER_AUTOPURGE_PURGE_INTERVAL: "0"
    healthcheck:
      test: nc -z localhost 29092 || exit
      interval: 10s
      timeout: 5s
      retries: 15
    networks:
      - my-net

  db:
    image: postgres:17
    expose:
      - 5432
    ports:
      - 5433:5432
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=db
    healthcheck:
      test: pg_isready -U $$POSTGRES_USER
      interval: 10s
      timeout: 3s
      retries: 3
    volumes:
      - pg_data:/var/lib/postgresql/data
    networks:
      - my-net

  elasticsearch:
    image: elasticsearch:8.16.0
    ports:
      - 9200:9200
      - 9300:9300
    networks:
      - my-net
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false

  redis:
    image: redis:latest
    ports:
      - 6379:6379
    networks:
      - my-net

  celery:
    build:
      context: ./
      dockerfile: Dockerfile
    command: poetry run celery -A app.celery worker --beat --loglevel=info
    volumes:
      - ./src:/srv
    env_file:
      - .env
    depends_on:
      - redis
    networks:
      - my-net

  flower:
    build:
      context: ./
      dockerfile: Dockerfile
    command: poetry run celery -A app.celery flower --port=5555
    volumes:
      - ./src:/srv
    env_file:
      - .env
    ports:
      - 5555:5555
    depends_on:
      - redis
    networks:
      - my-net

  locust:
    build:
      context: .
      dockerfile: locust/Dockerfile
    container_name: locust
    volumes:
      - ./locust:/mnt/locust
    command: -f /mnt/locust/locustfile.py -H http://locust:8089
    depends_on:
      - web
    ports:
      - 8089:8089
    networks:
      - my-net
    env_file:
      - .env

networks:
  my-net:
    external: true

volumes:
  pg_data:
